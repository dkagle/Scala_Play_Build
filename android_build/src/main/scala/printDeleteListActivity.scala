package ezbuilder {

import java.io._


class DeleteListActivity(objectName: String, fields: List[String], primaryKey: Option[String], basedir: String, url: String ) extends scalaMVCFile(objectName, fields, primaryKey, basedir, url)   {

	def print() = {
		val fileName = objectName.capitalize+"DeleteListActivity.java"
		val writer = new PrintWriter(new File(basedir+fileName))
		calculate()
		write(writer,"package com.scalaitoinfinity.androidbuild;")
		write(writer,"import android.app.Activity;")
		write(writer,"import android.content.Intent;")
		write(writer,"import android.net.Uri;")
		write(writer,"import android.os.AsyncTask;")
		write(writer,"import android.os.Bundle;")
		write(writer,"import android.util.JsonReader;")
		write(writer,"import android.view.View;")
		write(writer,"import android.widget.AdapterView;")
		write(writer,"import android.widget.ListView;")
		write(writer,"import android.widget.SimpleAdapter;")
		write(writer,"")

		write(writer,"")
		write(writer,"import java.io.IOException;")
		write(writer,"import java.io.InputStream;")
		write(writer,"import java.io.InputStreamReader;")
		write(writer,"import java.net.HttpURLConnection;")
		write(writer,"import java.net.URL;")
		write(writer,"import java.util.ArrayList;")
		write(writer,"import java.util.HashMap;")
		write(writer,"import java.util.List;")
		write(writer,"")
		write(writer,"public class "+capitalizedObjectName+"DeleteListActivity extends Activity {")
		for ( f <- fields ) {
			val fieldName = getFieldName(f)
			val fn = Some(fieldName)
			write(writer,tab+"private static final String TAG_"+fn.get.toUpperCase+" = \""+fn.get.toUpperCase+"\";")
		}
		
		write(writer,tab+"ArrayList ResultRow = new ArrayList();")
	
		write(writer,"")
		
		write(writer,tab+"@Override")
		write(writer,tab+"protected void onCreate(Bundle savedInstanceState) {")
		write(writer,tab+tab+"super.onCreate(savedInstanceState);")
		write(writer,tab+tab+"Intent intent = getIntent();")
		write(writer,tab+tab+"setContentView(R.layout."+objectName+"listheader);")
		write(writer,tab+tab+"")
		write(writer,tab+tab+"new DownloadTask().execute(\""+url+objectName+"\");")
		write(writer,tab+"}")

		write(writer,tab+"public ArrayList readJsonStream(InputStream in) throws IOException {") 
		write(writer,tab+tab+"JsonReader reader = new JsonReader(new InputStreamReader(in, \"UTF-8\"));") 
		write(writer,tab+tab+"ArrayList returnList = null;")
		write(writer,tab+tab+"try {")
		write(writer,tab+tab+tab+" returnList = readMessagesArray(reader);") 
		write(writer,tab+tab+"} finally {")
		write(writer,tab+tab+tab+"reader.close();") 
		write(writer,tab+tab+"}")
		write(writer,tab+tab+"return returnList;")
		write(writer,tab+"}")
		write(writer,"")

		write(writer,tab+"public ArrayList readMessagesArray(JsonReader reader) throws IOException {")
		write(writer,tab+tab+"ArrayList<HashMap<String, String>> messages = new ArrayList<HashMap<String, String>>();")
		write(writer,tab+tab+"reader.beginArray();")
		write(writer,tab+tab+"while (reader.hasNext()) {")
		write(writer,tab+tab+tab+"messages.add(readMessage(reader));")
		write(writer,tab+tab+"}")
		write(writer,tab+tab+"reader.endArray();")
		write(writer,tab+tab+"return messages;")
		write(writer,tab+"}")
		write(writer,tab+"public HashMap readMessage(JsonReader reader) throws IOException {") 
		for ( f <- fields ) {
			val fieldName = getFieldName(f)
			val fn = Some(fieldName)
			write(writer,tab+tab+"String "+fn.get.capitalize+" = null;")
		}
		write(writer,tab+tab+"HashMap<String, String> map = new HashMap<String, String>();")
		write(writer,tab+tab+"reader.beginObject();")
		write(writer,tab+tab+"while (reader.hasNext()) {")
		write(writer,tab+tab+tab+"String name = reader.nextName();")
		for ( f <- fields ) {
			val fieldName = getFieldName(f)
			val fn = Some(fieldName)
			if ( fn.get == primaryKey.get ) 
				write(writer,tab+tab+tab+"if (name.equals(\""+fn.get+"\")) {")
			else
				write(writer,tab+tab+tab+"} else if (name.equals(\""+fn.get+"\")) {")
			write(writer,tab+tab+tab+tab+fn.get.capitalize+" = reader.nextString();")
			write(writer,tab+tab+tab+tab+"map.put(\""+fn.get.toUpperCase+"\", "+fn.get.capitalize+");")
			
// fix numbers after decimal point issue with doubles
		}	
		write(writer,tab+tab+"}")
		write(writer,tab+"}")
		write(writer,tab+"reader.endObject();")
		write(writer,tab+"return map;")
		write(writer,tab+"}")
		write(writer,"")
		write(writer,tab+"private class DownloadTask extends AsyncTask<String, Void, ArrayList> {")
		write(writer,tab+tab+"@Override")	
		write(writer,tab+tab+"protected ArrayList doInBackground(String... urls) {")	
		write(writer,tab+tab+tab+"try {")
		write(writer,tab+tab+tab+tab+"return loadFromNetwork(urls[0]);")
		write(writer,tab+tab+tab+"} catch (IOException e) {")
		write(writer,tab+tab+tab+tab+"return new ArrayList();")	
		write(writer,tab+tab+tab+"}")	
		write(writer,tab+tab+"}")
		write(writer,"")
		write(writer,tab+tab+"@Override")
		write(writer,tab+tab+"protected void onPostExecute(final ArrayList result) {")
		write(writer,tab+tab+tab+"ListView list = (ListView) findViewById(R.id."+objectName+"list);")
		write(writer,tab+tab+tab+"SimpleAdapter adapter = new SimpleAdapter(getApplicationContext(), result, R.layout."+objectName+"list, new String[]{"+tagString+"}, new int[]{"+idString+"});")
		write(writer,tab+tab+tab+"list.setAdapter(adapter);")
		write(writer,tab+tab+tab+"list.setOnItemClickListener(new AdapterView.OnItemClickListener() {")
		write(writer,tab+tab+tab+tab+"@Override")
		write(writer,tab+tab+tab+tab+"public void onItemClick(AdapterView<?> parent, View view, int position, long id) {")
		write(writer,tab+tab+tab+tab+tab+"int Id = (int) id;")
		write(writer,tab+tab+tab+tab+tab+"Intent formIntent;")
		write(writer,tab+tab+tab+tab+tab+"formIntent = new Intent(getApplicationContext(), "+capitalizedObjectName+"DeleteFormActivity.class);")
		write(writer,tab+tab+tab+tab+tab+"HashMap<String,String> row = (HashMap)result.get("+primaryKey.get.capitalize+");")
		for ( f <- fields ) {
			val fieldName = getFieldName(f)
			val fn = Some(fieldName)
			write(writer,tab+tab+tab+tab+tab+"formIntent.putExtra(\""+fn.get.toUpperCase+"\", row.get(\""+fn.get.toUpperCase+"\"));")
		}
		write(writer,tab+tab+tab+tab+tab+"startActivity(formIntent);")
		write(writer,tab+tab+tab+tab+"}")
		write(writer,tab+tab+tab+"});")
		write(writer,tab+tab+"}")

		write(writer,"")
		write(writer,tab+"private ArrayList loadFromNetwork(String urlString) throws IOException {")
		write(writer,tab+tab+"InputStream stream = null;")
		write(writer,tab+tab+"ArrayList al = null;")
		write(writer,tab+tab+"try {")
		write(writer,tab+tab+tab+"stream = downloadUrl(urlString);")
		write(writer,tab+tab+tab+"al = readJsonStream(stream);")
		write(writer,tab+"} finally {")
		write(writer,tab+tab+"if (stream != null) {")
		write(writer,tab+tab+tab+tab+"stream.close();")
		write(writer,tab+tab+tab+"}")
		write(writer,tab+tab+"}")
		write(writer,tab+"return al;")
		write(writer,tab+"}")		
		write(writer,"")
		write(writer,tab+"private InputStream downloadUrl(String urlString) throws IOException {")
		write(writer,tab+tab+"URL url = new URL(urlString);")
		write(writer,tab+tab+"HttpURLConnection conn = (HttpURLConnection) url.openConnection();")
		write(writer,tab+tab+"conn.setReadTimeout(10000);")
		write(writer,tab+tab+"conn.setConnectTimeout(15000);")
		write(writer,tab+tab+"conn.setRequestMethod(\"GET\");")
		write(writer,tab+tab+"conn.setDoInput(true);")
		write(writer,tab+tab+"conn.connect();")
		write(writer,tab+tab+"InputStream stream = conn.getInputStream();")
		write(writer,tab+tab+"return stream;")
		write(writer,tab+tab+"}")
		write(writer,tab+"}")
		write(writer,"}")

		writer.close()

	}
}
}
